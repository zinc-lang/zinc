:: literal_expr fn {
    123;
    0xbeaf;
    0b0111_1011;
    0o1647;

    24.5;
    1.2E+4;

    "foo bar";
    "foo\nbar";

    // todo multi-line string literal

    true;
    false;

    foo;
    bar;
    foo::bar;
    foo::bar::baz;

    // .() tuple literal
    // .{} struct literal
    // Foo {}
    // .[] array literal
    // [2][1, 2]

    {
        block_end
    }
}

:: prefix_expr fn {
    // not false;
    !false;
    -42;
    &foo;

    // ^foo; // address of
    // foo^; // dereference

    let foo = 1;
    let bar uint = 2;

    // let* baz = 3;
    // let mut baz = 3;
    set baz = bar;
}

:: infix_expr fn {
    a + b;
    a + b - c;

    a * b;
    a / b;

    a * b + c; // == (a * b) + c
    a + b * c; // == a + (b * c)

    // foo and bar;
    // foo and bar or aaa and bbb; // == (foo and bar) or (aaa and bbb)
    // foo and !bar or not aaa and bbb; // == (foo and (!bar)) or ((not aaa) and bbb)
}

:: suffix_expr fn {
    foo();
    foo(foo, bar);
    foo(foo, bar,);

    // foo?;
    // foo.bar;
    // foo.[n];
}

:: compound_expr fn {
    // if
    // while
    // for in
}
