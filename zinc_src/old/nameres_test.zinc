:: main fn {
    let x = 2;
    let y = three();
    add2(x, y);

    x;

    {
        let z = x + y;
    }

    // z;

    foo();

    add2(1, 2);
    add3(1, 2, 3);
}

:: three fn uint
    => 3;

:: add2 fn (a sint, b sint) sint {
    a + b
}

:: add3 fn (a sint, b sint, c sint) sint {
    a + b + c
}

:: foo fn {
    bar();
    {
        bar()
    }

    :: bar fn {}

    :: asdf fn {
        asdf();
    }

    // not_found; // err: not found
    // barfoo; // err: not found
    // foobar(); // err: not found

    foo();
}

:: var fn sint;

:: square fn (a sint) sint
    => a * a;

:: some_func fn {
    // a; // err: not found
}

:: nested_func fn (p sint) {
    :: nested fn {
        // p; // err: not found
    }
}

// :: some_func fn {} // err: defined multiple times

// :: too_many fn (foo uint, foo sint) {} // err: parameter used more than once
